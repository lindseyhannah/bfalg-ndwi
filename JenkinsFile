#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def projectId = "venicegeo:beachfront:bfalg-ndwi"
  def appvers = ""
  def appName = ""

  stage("Config") {
    // clone the configuration repository and copy the current configuration
    def configDir = "${root}/configuration"
    def configFile = "${root}/config.json"
    dir(configDir) {
      git url: "${env.CONFIGURATION_URL}", credentialsId: "${env.CONFIGURATION_CREDS}"
      sh "mv ${configDir}/${ENVIRONMENT}-config.json ${configFile}"
      deleteDir()
    }
    // read the current configuration
    def configJson = readJSON file: "${configFile}"
    for (param in configJson.credparams + configJson.jobparams) { 
      env."${param.name}" = (param.type == "booleanParam") ? "${param.defaultvalue}".toBoolean() : "${param.defaultvalue}"
    }
  }
  
  stage("Setup") {
    deleteDir()
    sh "mkdir bfalg-ndwi"
    dir("bfalg-ndwi") {
      if(env.USE_GIT_CREDS.toBoolean()) {
        git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
      } else {
        git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
      }

    appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true).trim()
    appName = "bfalg-ndwi-${appvers}"
    }
  }

  if(!env.SKIP_SCANS.toBoolean()) {
    stage("Dependency Check") {
      withCredentials([
        [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
          dir("bfalg-ndwi") {
            def depHome = tool 'owasp_dependency_check'
            withEnv(["PATH+=${depHome}/bin"]) {
              sh 'dependency-check.sh --project "bfalg-ndwi" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
              sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/latest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
            }
          }
        }
    }

    stage("Fortify Scans") {
          withCredentials([
            [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
          ]) {
            dir("bfalg-ndwi") {
              sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} ./bfalg_ndwi/{*.py,**/*.py} -exclude **/test/* -exclude **/deploy/*"
              sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx8G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
              sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/latest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
            }
          }
    }
    
    /*
      stage("Sonar") {
          withCredentials([string(credentialsId: "${env.SONAR_TOKEN}", variable: 'USERNAME')]) {
              withEnv(["HOME=${root}"]) {
                  sh """export PATH="$root/miniconda2/bin:$PATH" && source activate bfalg-ndwi
        ${sonar}/bin/sonar-scanner \
                      -Dsonar.python.coverage.reportPath=report/coverage/coverage.xml \
                      -Dsonar.sources=${root}/bfalg-ndwi/bfalg_ndwi \
                      -Dsonar.host.url=${env.SONAR_URL} \
                      -Dsonar.projectKey=${projectId} \
                      -Dsonar.projectName=${projectId} \
                      -Dsonar.language=py \
                      -Dsonar.projectBaseDir=${root}/bfalg-ndwi \
                      -Dsonar.projectVersion=${appvers} \
                      -Dsonar.login=${USERNAME}
        source deactivate
                  """
              }
          }
      sh "rm $HOME/.condarc"
      }*/
  }
}
